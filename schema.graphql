type Query {
  endpoints(
    version: String
    filter: Filter
    limit: Int
    route: String
  ): [Endpoint]!
  endpoint(route: String, version: String): Endpoint
  releases: [Release]!
  lastRelease: Release!
}

type Release {
  version: String!
  createdAt: String!
  description: String!
}

input Filter {
  isLegacy: Boolean
  isDeprecated: Boolean
  isEnabledForApps: Boolean
  isGithubCloudOnly: Boolean
}

type Endpoint {
  id(format: StringFormat): String!
  scope(format: StringFormat): String!
  name: String!
  description: String!
  method: String!
  url: String!
  documentationUrl: String!

  parameters: [Parameter]!
  headers: [Header]
  previews(required: Boolean): [Preview]!

  isDeprecated: Boolean
  isLegacy: Boolean
  isEnabledForApps: Boolean
  isGithubCloudOnly: Boolean
  renamed: Rename
  responses(code: ResponseCode): [Response]
  changes(type: ChangeType): [Change]
}

enum ResponseCode {
  CODE_2xx
  CODE_4xx
  CODE_200
  CODE_204
  CODE_201
  CODE_418
  CODE_205
  CODE_404
  CODE_302
  CODE_422
  CODE_403
  CODE_202
  CODE_409
  CODE_405
}

type Response {
  code: Int!
  description: String!
  schema: String
  examples: [Example]
}

type Example {
  name: String
  data: String
}

type Header {
  name: String!
  description: String!
  value: String!
}

type Preview {
  name: String!
  note: String!
  required: Boolean!
}

type Rename {
  before(format: StringFormat): String
  after(format: StringFormat): String
  date: String
  note: String
}

type Parameter {
  name: String!
  deprecated: Boolean
  alias: String

  # if Parameter is deprecated, the properties below are not returned
  type: String
  description: String
  in: ParameterLocation
  required: Boolean
  allowNull: Boolean
  enum: [String]
  validation: String
  mapToData: Boolean
  default: String
}

type Change {
  type: ChangeType
  date: String!
  note: String!
  before: BeforeAfterChange
  after: BeforeAfterChange
}

type BeforeAfterChange {
  description: String

  # Operation change only
  operationId: String

  # Parameter change only
  name: String
  type: String
  in: ParameterLocation
}

enum ParameterLocation {
  PATH
  HEADER
  QUERY
  BODY
}

enum ChangeType {
  OPERATION
  PARAMETER
}

enum StringFormat {
  # parts separated by dashes
  KEBABCASE

  # parts separated by camelizing first letter of each word except the first
  CAMELCASE
}
